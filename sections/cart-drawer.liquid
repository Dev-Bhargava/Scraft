<style>
  p.h4 {
    color: #cbc8c8;
    font-weight: 600;
    text-transform: math-auto;
    cursor: pointer;
  }
  p.h4.active {
    font-weight: 600;
    color: #000000;
    letter-spacing: 2px;
  }
  .tabs .tab:not(.active) {
    display: none;
  }
  .tabs .tab {
    padding: 10px;
    background: #f2f2f2;
    height: 300px;
  }
  cart-drawer product-card{
    display: flex !important;
  }
  cart-drawer product-card .product-card__image{
    max-width: 100px;
  }
  cart-drawer product-card .badge{
    font-size: 8px;
  }
  cart-drawer .drawer__empty-collections{
    max-width: 200px;
    margin: 20px auto;
  }
  cart-drawer .drawer__empty-collections li{
    list-style: none;
  }
  cart-drawer .drawer__empty-collections li a{
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 14px;
  }
</style>

<cart-drawer id="cart-drawer" class="cart-drawer drawer {% if cart.empty? %}drawer--center-body{% endif %} color-scheme color-scheme--{{ section.settings.color_scheme.id }}" initial-focus="false" handle-editor-events>
  <p class="h4 active" slot="header">{{ 'cart.general.title' | t }}</p>
  <p class="h4" slot="header">Recently Viewed</p>
    <div class="tabs">
      <div class="tab active">
        {%- if cart.empty? -%}
          <p class="h3 text-center">{{ 'cart.general.empty' | t }}</p>
          <p class="h5 text-center" style="margin-top: 40px; text-transform: capitalize;">Not sure where to start?<br/> Try these collections:</p>
          <ul class="drawer__empty-collections">
            {%- if section.settings.empty_cart_collections == blank -%}
              <li>
                <a href="{{ routes.all_products_collection_url }}">
                  <span class="flex items-center">{{ 'cart.general.continue_shopping' | t }}</span>
                  {%- render 'icon' with 'chevron-right', width: 12, direction_aware: true -%}
                </a>
              </li>
            {%- else -%}
              {%- for item in section.settings.empty_cart_collections -%}
                <li>
                  <a class="flex items-center justify-between" href="{{ item.url }}">
                    <span class="flex items-center gap-3">
                      {%- liquid
                        if item.metafields.theme.icon.value != blank
                          echo item.metafields.theme.icon.value | image_url: width: item.metafields.theme.icon.value.width | image_tag: loading: 'lazy', widths: '80,96,160,192', is: 'lazy-image'
                        endif

                        echo item.title
                      -%}
                    </span>
                    {%- render 'icon' with 'chevron-right', width: 12, direction_aware: true -%}
                  </a>
                </li>
              {%- endfor -%}
            {%- endif -%}
          </ul>
        {%- else -%}
          {%- if settings.cart_show_free_shipping_bar -%}
            {%- render 'free-shipping-bar' -%}
          {%- endif -%}

          <div class="cart-drawer__items">
            {%- for line_item in cart.items -%}
              {%- render 'line-item', line_item: line_item, show_quantity_selector: true -%}
            {%- endfor -%}
          </div>

          {%- liquid
            assign cross_sell_products_count = 0

            for product in section.settings.cross_sell_products
              assign products_in_cart = cart.items | where: 'product_id', product.id

              if products_in_cart.size == 0 and product.available
                assign cross_sell_products_count = cross_sell_products_count | plus: 1
              endif
            endfor
          -%}

          {%- if cross_sell_products_count > 0 -%}
            <div class="cart-drawer__complementary-products complementary-products">
              {%- assign carousel_id = 'complementary-products-carousel-' | append: section.id -%}

              {%- if section.settings.cross_sell_title != blank or section.settings.cross_sell_stack_products == false and cross_sell_products_count > 1 -%}
                <div class="complementary-products__header complementary-products__header--align-start">
                  <p class="h6">{{ section.settings.cross_sell_title }}</p>

                  {%- if section.settings.cross_sell_stack_products == false and cross_sell_products_count > 1 -%}
                    <carousel-navigation aria-controls="{{ carousel_id }}" class="page-dots page-dots--narrow">
                      {%- for i in (1..cross_sell_products_count) -%}
                        <button class="relative" aria-current="{% if forloop.first %}true{% else %}false{% endif %}">
                          <span class="sr-only">{{ 'general.accessibility.go_to_item' | t: index: forloop.index }}</span>
                        </button>
                      {%- endfor -%}
                    </carousel-navigation>
                  {%- endif -%}
                </div>
              {%- endif -%}

              {%- liquid
                capture complementary_products
                  for product in section.settings.cross_sell_products
                    assign products_in_cart = cart.items | where: 'product_id', product.id

                    if products_in_cart.size == 0 and product.available
                      render 'product-card-horizontal', product: product, show_quick_buy: true
                    endif
                  endfor
                endcapture
              -%}

              {%- if section.settings.cross_sell_stack_products -%}
                <div class="complementary-products__product-list">
                  {{- complementary_products -}}
                </div>
              {%- else -%}
                <scroll-carousel id="{{ carousel_id }}" class="complementary-products__product-list complementary-products__product-list--carousel scroll-area snap-x">
                  {{- complementary_products -}}
                </scroll-carousel>
              {%- endif -%}
            </div>
          {%- endif -%}

          <form action="{{ routes.cart_url }}" method="POST" class="cart-drawer__footer" slot="footer">
            <input type="hidden" name="attributes[products_mobile_grid_mode]" value="">
            <input type="hidden" name="attributes[products_desktop_grid_mode]" value="">

            {%- if section.settings.show_cart_note or section.settings.show_shipping_text -%}
              <div class="v-stack gap-0.5 justify-items-start">
                {%- if section.settings.show_cart_note -%}
                  {%- assign cart_note_dialog_id = 'cart-note-' | append: section.id -%}
                  <button class="link-faded-reverse" aria-controls="{{ cart_note_dialog_id }}">{{ 'cart.general.add_order_note' | t }}</button>

                  <cart-note-dialog id="{{ cart_note_dialog_id }}" class="cart-drawer__order-note">
                    <div class="form">
                      <cart-note class="form-control">
                        {%- assign order_note = 'cart.general.order_note' | t -%}
                        {%- assign placeholder = 'cart.general.note_placeholder' | t -%}
                        {%- render 'input', name: 'note', multiline: 3, label: order_note, value: cart.note, placeholder: placeholder, show_label_as_block: true -%}
                      </cart-note>

                      <button type="button" class="button" is="dialog-close-button">{{ 'cart.general.save_note' | t }}</button>
                    </div>
                  </cart-note-dialog>
                {%- endif -%}

                {%- if section.settings.show_shipping_text -%}
                  <p class="text-subdued">{{ 'cart.general.taxes_and_shipping_at_checkout' | t }}</p>
                {%- endif -%}
              </div>
            {%- endif -%}

            {% for discount_application in cart.cart_level_discount_applications %}
              <div class="h-stack justify-start gap-4">
                <span class="discount-badge text-xs">{%- render 'icon' with 'discount', width: 12 -%} {{- discount_application.title -}}</span>
                <span class="text-subdued">-{{ discount_application.total_allocated_amount | money }}</span>
              </div>
            {% endfor %}

            <div class="button-group">
              {%- if section.settings.show_view_cart_button or section.settings.show_checkout_button == false -%}
                {%- assign view_cart = 'cart.general.view_cart' | t -%}
                {%- render 'button', href: routes.cart_url, content: view_cart, stretch: true -%}
              {%- endif -%}

              {%- if section.settings.show_checkout_button -%}
                {%- capture checkout_button -%}
                  {{- 'cart.general.checkout' | t -}}

                  {%- if section.settings.show_price_in_checkout_button -%}
                    <span class="cart-drawer__button-price">{{- cart.total_price | money -}}</span>
                  {%- endif -%}
                {%- endcapture -%}

                {%- render 'button', type: 'submit', content: checkout_button, name: 'checkout', stretch: true -%}
              {%- endif -%}
            </div>
          </form>
        {%- endif -%}
      </div>
      <div class="tab">
        <recently-viewed-products products-count="{{ section.settings.products_count }}" {% if request.page_type == 'product' %}exclude-id="{{ product.id }}"{% endif %}>
          {%- assign color_scheme_hash = section.settings.color_scheme.settings.background_gradient | default: section.settings.color_scheme.settings.background | md5 -%}
      
          <div class="color-scheme color-scheme--{{ section.settings.color_scheme.id }} color-scheme--bg-{{ color_scheme_hash }} {% if section.settings.separate_section_with_border %}bordered-section{% endif %}">
            <div class="section-stack">
              {%- assign parsed_terms = search.terms | split: ' OR ' -%}
    
              {%- capture product_list -%}
                {%- for parsed_term in parsed_terms -%}
                  {%- assign id = parsed_term | split: 'id:' | last | times: 1 -%}
                  {%- assign product = search.results | where: 'id', id | first -%}
    
                  {%- if product != blank -%}
                    {%- render 'product-card', product: product, reveal: settings.stagger_products_apparition, hide_product_information: section.settings.hide_product_information -%}
                  {%- endif -%}
                {%- endfor -%}
              {%- endcapture -%}
              <product-list class="product-list {% if section.settings.hide_product_information %}product-list--compact{% endif %} justify-center">
                  {{- product_list -}}
              </product-list>
            </div>
          </div>
        </recently-viewed-products>
      </div>
    </div>
</cart-drawer>

{% schema %}
{
  "name": "t:sections.cart_drawer.name",
  "class": "shopify-section--cart-drawer",
  "tag": "section",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.cart_drawer.page_info"
    },
    {
      "type": "paragraph",
      "content": "t:sections.cart_drawer.free_shipping_bar_info"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:global.colors.scheme",
      "default": "scheme-1"
    },
    {
      "type": "checkbox",
      "id": "show_cart_note",
      "label": "t:sections.cart_drawer.show_cart_note",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_shipping_text",
      "label": "t:sections.cart_drawer.show_shipping_text",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_view_cart_button",
      "label": "t:sections.cart_drawer.show_view_cart_button",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_checkout_button",
      "label": "t:sections.cart_drawer.show_checkout_button",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_price_in_checkout_button",
      "label": "t:sections.cart_drawer.show_price_in_checkout_button",
      "default": true
    },
    {
      "type": "header",
      "content": "t:sections.cart_drawer.cross_sell_category"
    },
    {
      "type": "product_list",
      "id": "cross_sell_products",
      "label": "t:sections.cart_drawer.cross_sell_products",
      "info": "t:sections.cart_drawer.cross_sell_products_info",
      "limit": 5
    },
    {
      "type": "inline_richtext",
      "id": "cross_sell_title",
      "label": "t:sections.cart_drawer.cross_sell_heading",
      "default": "Complete with"
    },
    {
      "type": "checkbox",
      "id": "cross_sell_stack_products",
      "label": "t:sections.cart_drawer.cross_sell_stack_products",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "separate_section_with_border",
      "label": "t:global.section.separate_section_with_border",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "hide_product_information",
      "label": "t:global.product_list.hide_product_information",
      "info": "t:global.product_list.hide_product_information_info"
    },
    {
      "type": "header",
      "content": "t:global.product_list.product_list_category"
    },
    {
      "type": "range",
      "id": "products_count",
      "min": 2,
      "max": 24,
      "label": "t:global.product_list.products_to_show",
      "default": 9
    },
    {
      "type": "select",
      "id": "products_per_row_mobile",
      "label": "t:global.product_list.products_per_row_mobile",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "range",
      "id": "products_per_row_desktop",
      "min": 2,
      "max": 6,
      "label": "t:global.product_list.products_per_row_desktop",
      "default": 4
    },
    {
      "type": "header",
      "content": "Empty Cart Recommendations"
    },
    {
      "type": "collection_list",
      "id": "empty_cart_collections",
      "label": "Collection list"
    }
  ]
}
{% endschema %}

<script>
  const tabContainer = document.querySelector("#cart-drawer");
  const navList = tabContainer.querySelectorAll("#cart-drawer p.h4");
  const tabList = tabContainer.querySelectorAll(".tab");

  for(let i = 0; i < navList.length; i++){
    navList[i].addEventListener('click', (evt)=>{
      let currentLink = tabContainer.querySelector("p.h4.active");
      let currentTab = tabContainer.querySelector(".tab.active");

      currentLink.classList.remove("active");
      navList[i].classList.add("active");
      
      currentTab.classList.remove("active");
      tabList[i].classList.add("active");
    })
  }
</script>